from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def make_sound(self):
        pass


class Dog(Animal):
    def make_sound(self):
        print ("Woof!")


class Cat(Animal):
    def make_sound(self):
        print("Meow!")


dog = Dog()
dog.make_sound()
cat = Cat()
cat.make_sound()
'''

'''
from abc import ABC, abstractmethod


class animal(ABC):
    @abstractmethod
    def sound(self):
        pass
    
class dog(animal):
    def sound(self):
        print("bowbow")
        
class cat(animal):
    def sound(self):
        print("meow")

dog=dog()
dog.sound()
cat1=cat()
cat1.sound()
'''



'''
from abc import ABC, abstractmethod
class human(ABC):
    @abstractmethod
    def sound(self):
        pass
    
    
    
class male(human):
    def playing(self):
        print("i am playing cricket")
    def walking(self):
        print("i am walking")

class female(human):
    def singing(self):
        print("i am singing")
    def dancing(self):
        print("i am dancing")
        
a1=male()
a1.playing()
a1.walking()
a2=female()
a2.singing()
a2.dancing()
'''



'''
from abc import ABC, abstractmethod
class human(ABC):
    @abstractmethod
    def sound(self):
        pass
class male(human):
    def sound(self):
        print("i am playing cricket")
    def sound(self):
        print("i am walking")

class female(human):
    def sound(self):
        print("i am singing")
    def sound(self):
        print("i am dancing")
        
a1=male()
a1.sound()
a1.sound()
a2=female()
a2.sound()
a2.sound()
'''
'''
from abc import ABC, abstractmethod
class human(ABC):
    @abstractmethod
    def sound(self):
        pass

class male(human):
   def sound(self):
        print("i am walking")

class female(human):
    def sound(self):
        print("i am dancing")
        
a1=male()
a1.sound()
a2=female()
a2.sound()